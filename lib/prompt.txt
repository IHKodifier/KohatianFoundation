ok lets start some pair programming. modify my UserAvatarOverlayChild so that 
it signs out the user on logout button,it navigates to the scaffolded ConsumerStatefWidget named AdminCenter. 

Then you will write code AdminCenter 
The AdminCenter is a Scafollded  Widget with a CustomScrollView in the body. slivers in the CustomSliverView include AppBarWidgetAdminCenterCore and SiteFooter

Next you will write the AdminCenterCore as a SliverToBoxAdapter whoose child grows and shrinks depending upon it contents The contents have three Cards for creation of an Entry model Class, EntryCoordinator  setting and other settings
rewrite the UserAvatarOverlayChild widgetElevatedButtons for Logout and AdminCenter are already there inside tge cards's trailing widget impement functionality on those ElevatedButtons

write an Adapation of AppBarWidget whichwill be a nonsliver version of the sliver based AppBarWidget. ignore the flexiblespacebar things. a simple adapatation of AppBar()

next up we are going to create the contents for createEntryCard, createEntryCoordinatorsCard and otherSettingsCard.give them suitable names. The content of CreateEntryCard is a Stepper widget of 3 steps. step 1 has textformfields for entry_name, entrynumber,entry_strength(which is integer), start and endDate, entry_title(optional to fill), and entry_slogan(optional to fill) with all the texteditingcontrollers, validation and save/submit logic . each step of the stepper has its own formkey so the entry can be partially saved from the data input by user  on each step. moving forward to step 2 triggers the action of saving the current Entry into the firestore.instance.collection('entries). in step 2 of the stepper, the step presents user to choose between a centered button (which is also a drag target for drag and droping file ) for selecting .xlsx file for uploading or another button  create blank Cadets in the  created entry depending upon the number entered as  strength in step1.  all the cadets will be created in a 'cadets' sub collection of the actual Entry's firestore document. step just like step 2, step 3 is also optional and can be skipped if the user wants to  step3 presents the user  to choose various cadet from within the created entry fo certain distinctions they received such as  bestCadet, bestStudent, bestSportman, bestGymnast, bestDrillCommander, bestRider, bestTentpegger, bestSwimmer, bestShooter, bestQari, bestDebatorUrdu, bestDebatorEnglish, bestEssayWriterUrdu, bestEssayWriterEnglish,  bestArtist, etc.
i have always faced a confusion ever since i started flutter.Lets say i have a  scaffolded widget  named A with custom scollview content in body.let the content widget be named B.  the B widget  has a button to invoke /make visible  a form with with textformfields and their respective controllers etc and may have an  upload file upload etc in the content. the form's save and reset buttons sare inside the form widget B. the form B needs to perform the vaildations etc.  ipon successfull form validation  it needs to write  the data to a firestore doc. The  Widget A needs to know whether the  firestore write whether  progress and was sucessful or not. to wire up this whole setup, which of A and B widget  needs to strictly Stateful? should i declare my text editing controllers in widget A and then pass them on to B  in constructor? suppose widget B is to have mutiple distinct forms with distinct formkey how should i wire this up 

my CreateEntryStepper needs to display form data  received by EntryDeatilsForm in Constructor, updates to textediting controllers update the UI render by CreateEntryStepper but the showDatePicker do no t update reflecting the date selectedbu yser. identify and isolate the issue and sugges tprecidse code fixes
write a riverpod based entryProvider to provide the entry being created in the step1 of Stepper to be provide the new Entry being created to thelater step of the dstepper. 
 
write fluuter code for row that has two children for screens less than 800 wide, it swtiches to a Column.one child is elevated button  with label "create {$widget.entryStengthController.text} blank cadets". creating  that many blank Cadet documents in the firebasefirestore.inatance.collection('entrys').doc('entryid)  a  subcollection of 'cadets'. The other child is a drag n drop target for uploading .slsx files onto the app, the excel has five cols, kitno,name, domicile, house  and mobilenumber. parsing this .xlsx, the app shall create docs for   as many as total rows of excel in the firebasefirestore.inatance.collection('entrys').doc('entryid). collection('cadets'). 

introducing the entryProvider now causes a null value exception when trying to render the CreateEntryStepper on createEntryCard. by design, entryProvider is supposed to be null untill anew entry is created by user and this provider provides the newly created entry to the rest of thye steps on the stepperfind a workaround for this initial null cvalue since its by design and hasd to be there

its time to correct a bad design decision across tghe entire code base. here is the issue. My entry model class is set up to have members of type DateTime, while this type goes well with the UI layer as DatePickers use DateTime by default, it does not go very well with Firestore since firestore uses Timestampclass. with this background explained, i had two design choices either i could use DateTime in my model to hel simplify UI logic or i could use Timestamp types in entry_model to simplify   firestore read/writes., i took the former approach, it simplified my UI logic but at the expense of typecasting Timestamp to DateTime back n forth evey time the firestore data needs to updated in UI. im thinking of modifying my model classes to use Timestamp instead of DateTiime, whats your suggestion. its going to require rewriting/modifying existing providers, model classes and their toMap and fromMap, toJson and fromJson etc. etc.whats your suggestion?
modify CreateEntryPage so that EntryName TextformField, Entry Number TextForm Field , Entry Strength Form Field , startDatePicker, EndDatePicker  Enty title TextformField and Entry Slogan TecxtFormField  are represented by a single local variable and their visibility can be turned on or off by the value of formIsBusy. no need to hide rest of the widgets when formIsBusy== true
group EntryName TextformField, Entry Number TextForm Field , Entry Strength Form Field , startDatePicker, EndDatePicker  Enty title TextformField and Entry Slogan TecxtFormField into a single variable called formFields
write code to make two changes to the crerateEntryPage, first of all only hide the formfields when formIsBusy. no need to hide the dropzone when formIsBusy. Secondly, when a new entry is successfully created show a Centered TextWidget bearing the name of the newly created entry  having been successfully created. write full code for the class so i can copy and replace the existing code
ok. we are about to simplify things for EntryCreation. lets show only two elevated buttons for date pickers initialized to DateTime.now labelled  Entry Start Date and entry End Date with no upfront wiring-up to the EntryCreationNotifier. as soon as the user picks date  still no wiring up with the EntryCreationNotifier . as soon as the Save Entry button is clicked, dates from both the file pickers would be assigned to the Entry state in the EntryCreationNotifier before doing the actual firestore saving. Once the notifier entry state  has been set, we will save the entry to firestore and get the entrycreation notifier state fully populated with the the data of newly created entry. write the required code modifications to CreateEntryPage 

im using flutter_riverpod 2.5.1. write a riverpod streamprovider to read the entrys collection from forebasefirestore.instance. and transform the firebase stream into Stream<Entry>.

rewrite the entire Entry class
the only changes you are making to the existing code are  this 
make  the following three lists as nullable lists 
houseCommanders list , 
the seniorSectionCommanders list 
sectionCommanders lists 
keep all other class members like bestCadet,
bestStudent,
bestSportman,
bestGymnast,
bestDrillCommander,
bestRider,
bestTentpegger,
bestSwimmer,
bestShooter,
bestQari,
bestDebatorUrdu,
bestDebatorEnglish,
bestEssayWriterUrdu,
bestEssayWriterEnglish,
bestArtist, in the existing code exactly as they are . i want full code, complete with fromMap, toMap, fromJson, toJson, copyWith, toString,equality via Equatable. no need to define an id for Entry
no need for implementing equality the traditional way, use Equatable to implement equality